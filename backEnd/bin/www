#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('karl:server');
var http = require('http');

var dataHolder = {};
const getData = ()=>{
    return dataHolder;
};
const setData = (data) => {
  dataHolder = data;
};
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || 8000);
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
var io = require('socket.io').listen(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);

io.on('connection', (client) => {

  var tempData = {};
  console.log('Connected client on port %s.', port);

  /* Sync agents positions */
  client.on('sync', (data)=> {
      console.log("SYNC POSITION RECEIVED ");
      console.log(data);
      const received_data = JSON.parse(data);
      if (received_data.info && received_data.info.id) {
          setData(received_data);
      }
  });


  client.on('disconnect', () => {
    console.log('Client disconnected');
  });

});


server.on('error', onError);
server.on('listening', onListening);
/**
 * Normalize a port into a number, string, or false.
 */

setInterval(() => {
    io.sockets.emit('update_position', getData());
},5000);

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

module.exports.io = io;
